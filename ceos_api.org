#+OPTIONS: ^:{}

#+TITLE: CEOS API Document
#+AUTHOR: fanwenjie

* Overview
ceos提供Task，Task_timer，Hard_timer，Queue，List，Base64编码等功能。
* API Interface 
** Task
系统基本对像，每一个需要loop的模块都应该继承Task类。
- 类定义 task.h
#+END_SRC
- 使用方法
1. 继承Task，构造方法必须指定父类和名称
2. 在setup方法中执行父类的setup方法，
3. override loop方法
- 使用示例
#+BEGIN_SRC c
   //定义Bus类，继承Task类
   class Bus: public Task {
       private:
       public:
         Bus(Task *parent, const char *name);
         ~Bus();
     
         void setup();
         void loop();

         //other fucntions
   }

   //setup方法中执行父类的setup
   i8 Bus::setup() {
       Task::setup();
       //other setup
   }

   //override loop
   void Bus::loop() {
   
   }

   //类使用
   bus = new Bus(&panel_4008, "485-bus-master");
#+END_SRC
** Task_timer
   系统软件定时器，ms级别，非精准定时，必须在Task中使用。
   - 头文件: task.h
   - 使用接口
#+BEGIN_SRC c
//定时器模式
typedef enum {
    TIMER_RELOAD_MANUAL = 0,  //单次定时器
    TIMER_RELOAD_AUTO,        //周期定时器
} TIMER_RELOAD_MODE;

/* 创建定时器,指定周期，所属对像指针 */
Task_timer(i16 cnt, Task* _task);

/* 创建定时器,指定名称，周期，所属对像指针*/
Task_timer(const char *name, i16 cnt, Task* _task);

/* 创建定时器,指定周期，定时器类型，所属对像指针 */
Task_timer(i16 cnt, TIMER_RELOAD_MODE mode, Task* task);    

void reload();   //定时器时间重新加载
void stop();     //停止定时器
u8 timeup();     //判断定时时间到
u8 running();    //判断定时器是否在运行
u8 stoped();     //判断定时器是否停止
#+END_SRC
   - 使用示例
#+BEGIN_SRC c
//Tasl_timer必须在Task类及其子类中创建，传入所属对像this指针
t_100ms      = new Task_timer(100, this);

//在Task的loop方法中判断定时时间是否到
if (t_100ms->timeup()) {
    //do somethings
    
    t_100ms->reload();  //周期定时器，需手动重新加载定时时间
}
#+END_SRC

** Hard_timer
   系统硬件定时器，硬件中断级别，精准定时。
   - 头文件: hard_timer.h
   - 使用接口
#+BEGIN_SRC c

#+END_SRC
   - 使用示例
#+BEGIN_SRC 

#+END_SRC
** Queue
   循环对像，提供以字节为单位的队列类型和以void *为单位的队列类型。
   - 头文件: queue.h
   - 使用接口
#+BEGIN_SRC c
    //queue类型
    typedef Queue<u8> Byte_queue;     //字节队列
    typedef Queue<void*> Void_queue;  //指针队列(适用于缓存数据包)

    Queue(u16 size);          //构造函数，指定队列容量

    T shift();                //移出队首元素
    T peek(i16 index);        //获取队列index处的元素,不出队
    void push(T e);           //往队列中添加元素
    T push(T e, u8 override); //往队列中添加元素，可指定队列满时是否覆盖
    u8 empty();               //判断队列是否为空
    u8 full();                //判断队列是否满
    u8 space();               //返回队列的剩余容量
    void reset();             //队列重置(清空内容)
    u16 length();             //返回队列容量
#+END_SRC
   - 使用示例
#+BEGIN_SRC 
    tx_fifo    = new Byte_queue(TX_FIFO_SIZE);  //创建发送队列
    rx_fifo    = new Byte_queue(RX_FIFO_SIZE);  //创建接收队列
    send_queue = new Void_queue(PACKAGE_QUEUE_LEN); //创建数据包队列

    tx_fifo->push(data);                        //数据入队
    if (!rx_fifo->empty()) {                  
        u8 ch = rx_fifo->shift();               //数据出队
    }
#+END_SRC
** List
   链表
   - 头文件: list.h
   - 使用接口
#+BEGIN_SRC c

#+END_SRC
   - 使用示例
#+BEGIN_SRC 

#+END_SRC
** Base64编解码
   - 头文件: base.h
   - 使用接口
#+BEGIN_SRC c
 //字符串进行base64编码
 int base64_encode(char *output, const char *input, int inputLen);
 //base64编码字符串解码为原始串
 int base64_decode(char *output, char *input, int inputLen);
#+END_SRC
   - 使用示例
#+BEGIN_SRC 

#+END_SRC



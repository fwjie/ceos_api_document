#+OPTIONS: ^:{}

#+TITLE: CEOS API Document
#+AUTHOR: fanwenjie

* Overview
  ceos提供Task，Task_timer，Hard_timer，Queue，List，Base64编码等功能。
* API Interface 
** Task
系统基本对像，每一个需要loop的模块都应该继承Task类。
- 类定义 task.h
- 提供方法:
#+BEGIN_QUOTE
#+BEGIN_SRC 
i8 running();                       //判断Task是否运行
void pause();                       //挂起Task运行
void resume();                      //恢复Task运行
u16 pid();                          //获取task id
Task *parent();                     //获取Task的父类
const char *name();                 //获取Task名称
void push_timer(Task_timer *timer); //给Task增加timer(具体见1.2 Task_timer)
#+END_SRC
#+END_QUOTE
- 使用方法
1. 继承Task，构造方法必须指定父类和名称
2. 在setup方法中执行父类的setup方法，
3. override loop方法
- 使用示例
#+BEGIN_QUOTE
#+BEGIN_SRC c
   //类定义
   class Bus: public Task {
     private:
     public:
       Bus(Task *parent, const char *name);
       ~Bus();
     
       void setup();
       void loop();
   }

   //setup方法中执行父类的setup
   i8 Bus::setup() {
     Task::setup();
   }

   //override loop
   void Bus::loop() {
   
   }

   //类使用
   bus = new Bus(&panel_4008, "485-bus-master");
#+END_SRC
#+END_QUOTE
   
** Task_timer
   系统软件定时器，loop级别，非精准定时。
   - 头文件: queue.h
   - 使用接口
#+BEGIN_SRC c

#+END_SRC
   - 使用示例
#+BEGIN_SRC 

#+END_SRC

** Hard_timer
   系统硬件定时器，硬件中断级别，精准定时。
   - 头文件: queue.h
   - 使用接口
#+BEGIN_SRC c

#+END_SRC
   - 使用示例
#+BEGIN_SRC 

#+END_SRC

** Queue
   循环对像，提供以字节为单位的队列类型和以void *为单位的队列类型。
   - 头文件: queue.h
   - 使用接口
#+BEGIN_SRC c

#+END_SRC
   - 使用示例
#+BEGIN_SRC 

#+END_SRC
** List
   链表
   - 头文件: list.h
   - 使用接口
#+BEGIN_SRC c

#+END_SRC
   - 使用示例
#+BEGIN_SRC 

#+END_SRC

** Base64编解码
   - 头文件: base.h
   - 使用接口
#+BEGIN_SRC c

#+END_SRC
   - 使用示例
#+BEGIN_SRC 

#+END_SRC



#+OPTIONS: ^:{}

#+TITLE: CEOS API Document
#+AUTHOR: fanwenjie

* ceos overview
  #+begin_quote
  conwin embed os是一个采用分时调度方法的操作系统，它的目标是简化应用程序的编写，增强程序的可读性和可维护性。
  #+end_quote
  #+begin_quote
  ceos的基本元素为Task，过去编写程序时，每个模块都有一个loop，再把所有的loop放到主程序的loop中，所有的loop依次执行。使用ceos框架，
  每个模块只需要继承Task类，override loop方法即可，在loop中执行本模块的逻辑功能。
  #+end_quote
  #+begin_quote
  *使用ceos的一些约定*
- 数据类型请采用typedef.h中的定义
- 代码中变量，函数的命名采用全小写下划线方式，统一风格
- 模块内的while循环无阻塞且尽可能的短
- 模块和驱动程序之间采用函数直接调用的方式，但模块之间的操作尽量采用回调的方式以降低耦合度
  #+end_quote
  
* ceos task schedule
  #+begin_quote
  ceos提供Task，Task_timer，Hard_timer，queue等组件。Task提供主程序轮循执行接口，Hard_timer提供定时器中断执行接口，
  Task_timer为软件实现的定时器，提供ms级的tick，queue实际上是ring queue，提供以byte为单位和以数据包(void *)为单位的queue应用类型。
  #+end_quote
** task schdule and task_timer
   #+begin_quote
   ceos有一个全局对像：Task_list_，在task.h中定义，每一个继承Task类的类在创建对像时都会被加入到Task_list中，相关代码如下：
   #+begin_src c++
typedef vector<Task*> Task_list
task_list.push_back(this);
   #+end_src
   #+end_quote
   #+begin_quote
   每个Task都有一个Task_timer_list，task_timer应该在对像创建时被创建，然后被挂到该对像的task_timer_list上面。
   task_timer是loop级别的定时器，它不能提供精确的定时。
   #+end_quote
   #+begin_quote

   *Task和Task_timer的工作原理如下*

   #+begin_src
   void Task::task_loop() {
     for (u8 i = 0; i < task_list.size(); i++) {             //1.遍历task_list
        Task *t = task_list[i];
            for (u8 j = 0; j < t->timer_list.size(); j++) { //2.遍历本task的task_timer_list
                Task_timer *timer = t->timer_list[j];       //3.更新task_timer的计数器
                    if (timer->_countdown > 0) {
                        timer->_countdown--;
                    };
                }
            }
            t->loop();                                     //4.执行本task的loop
        }
      };
   ｝
   #+end_src
   #+end_quote
   
** Hard_timer
   
** queue
   
* File System and simple Database
** File System
** Database
   
* Bus
** protocol
** master
** slave
   
* Net driver
** Ethernet
** GPRS，4G
   
* http server
  

#+OPTIONS: ^:{}

#+TITLE: Conwin Embed OS JSON Lib API & Guide
#+AUTHOR: fanwenjie

* Overview
  TObejct库，可单独使用，TObject对像即JSON对像，涉及文件：object.cpp, tparser.cpp
  - *特性*
   - 清晰简洁的API接口，命名和使用皆贴近Linux平台用户习惯
   - 支持JSON对像和字符串之间直接转换
   - 支持JSON对像成员的多级创建和获取
   - 合并创建JSON对像过程中多次申请的内存，一次释放
   - 其它优异的特性(下面的例子)

* 解析字符串为json对像
  - *头文件*: tparser.h
  - *API接口*
#+BEGIN_SRC c
    TObject *parse_json(const char *code);    //解析字符串为TObject对像
#+END_SRC
  - *使用示例*
#+BEGIN_SRC c
    char *buf    = "{name:\"xxxx\", age:30}"; /* JSON格式字符串 */
    TObject *obj = parse_json(buf);           /* 字符串转换为对像，parse失败则返回NULL */
    if (obj) {
        printf("%s\n", obj->to_string());
        delete obj;                           /* parse_json获得的JSON对像需要delete */
    }
#+END_SRC
* json对像操作方法
  - *头文件*: tobject.h
  - *API接口*
#+BEGIN_SRC c
    TObject();
    TObject(const char *value);
    TObject(const T_BOOLEAN value, T_FLAGS flags);
    TObject(const int value);
    TObject(const int value, T_FLAGS flags);
    TObject(const double value);
    TObject(const double value, T_FLAGS flags);
    TObject(const char *member_name, TObject  *value);
    TObject(const char *member_name, TObject  *value, T_FLAGS flags);

    void del(const char *member_name);
    void del(const int index);

    char* type_name();
    char* to_string(const char *path);
    char* to_string();
    char* to_string(T_FLAGS flags);
    char to_char();
    long  to_int();
    T_BOOLEAN to_bool();
    double to_float();


    TObject *new_member(const char *name);
    TObject *new_member(const char *path, Name_mode mode);

    int member_count();
    char *member_name(int index);
    TObject *member(int index);

    int has_member(const char *name);
    int has_member(const char *name, OBJECT_TYPE type);
    int has_member(const char *path, OBJECT_TYPE type, Name_mode mode);

#+END_SRC
  - *使用示例*
1. 创建JSON对像，并转化为字符串
#+BEGIN_SRC 

#+END_SRC
2. 创建嵌套JSON对像，获取对像成员数值
#+BEGIN_SRC 

#+END_SRC
3. 删除JSON对像成员，对像成员直接赋值另一个JSON对像
#+BEGIN_SRC 

#+END_SRC
4. JSON对像数组的操作
#+BEGIN_SRC 

#+END_SRC
